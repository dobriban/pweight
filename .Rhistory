devtools::document()
devtools::document()
devtools::document()
devtools::document()
?bayes_weights
library(pweight)
library(pweight)
?bayes_weights
?c_1
devtools::document()
?c_1
library(pweight)
?c_1
?lm
lm
library(pweight)
?c_1
devtools::document()
?c_1
library(pweight)
?c_1
devtools::document()
devtools::load_all()
?bayes_weights
devtools::document()
devtools::load_all()
?c_1
devtools::document()
devtools::load_all()
?bayes_weights
?c_1
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::document()
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::document()
?bayes_weights
devtools::load_all()
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
library(pweight)
?bayes_weights
devtools::document()
devtools::load_all()
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
library(pweight)
?bayes_weights
x = inf
x = Inf
2<x
devtools::document()
library(pweight)
?bayes_weights
?exp_weights
x
x==Inf
devtools::document()
library(pweight)
?exp_weights
devtools::document()
library(pweight)
?exp_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
library(pweight)
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::load_all(".")
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
package?pweight
devtools::document()
library(pweight)
package?pweight
browseVignettes()
package?knitr
package?markdown
devtools::use_vignette("pweight-basics")
install.packages("rmarkdown")
devtools::use_vignette("pweight-basics")
* \verb+eta+:  a vector of length J, the estimated means of test statistics, derived from the prior data
10^3
?rbinom
?rnorm
set.seed(2)
J <- 10^3
mu <- - 2*abs(rnorm(J))
frac_sig <- 0.1
X <- rbinom(J, 1, frac_sig)
t1 <- normrnd(J, X.*mu,1)
t2 <- normrnd(J, X.*mu,1)
t1 <- rnorm(J, X.*mu,1)
t2 <- rnorm(J, X.*mu,1)
X*mu
t1 <- rnorm(J, X*mu,1)
t2 <- rnorm(J, X*mu,1)
p.adjust(c(0.05,0.05,0.1),"bonferroni")
cat("Error: incorrect ordering of interval endpoints")
cat(c("Number of significant tests: ", sum(ind) ))
alpha <- 0.05
P_adjusted <- p.adjust(P_current,"bonferroni")
ind <- (P_adjusted<alpha)
cat(c("Number of significant tests: ", sum(ind) ))
P_current <- pnorm(t2)
alpha <- 0.05
P_adjusted <- p.adjust(P_current,"bonferroni")
ind <- (P_adjusted<alpha)
cat(c("Number of significant tests: ", sum(ind) ))
source("bayes_weights.R")
source("../bayes_weights.R")
ls
ls()
ggetwd()
getwd()
source("./R/bayes_weights.R")
source("../R/bayes_weights.R")
source("../../R/bayes_weights.R")
[1 2]
(1 2)
(1, 2)
c(1, 2)
c(1, 2)/c(1,2)
x = c(1,2)
find(x==1)
(x==1)
whioch(x==1)
which(x==1)
# Unit tests for bayes weights
source("bayes_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
# vary alpha
for (j in (1:4)) {
alpha <- 2^j / J
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
}
# Brent  ----------------
# generate means
J <- 200
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 100
# find weights
#source("bayes_weights.R")
w_1 <- bayes_weights(mu, sigma, q = alpha/J)
plot(mu,w_1$w)
# Unit tests for bayes weights
source("./R/bayes_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
# vary alpha
for (j in (1:4)) {
alpha <- 2^j / J
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
}
# Brent  ----------------
# generate means
J <- 200
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 100
# find weights
#source("bayes_weights.R")
w_1 <- bayes_weights(mu, sigma, q = alpha/J)
plot(mu,w_1$w)
# Unit tests for Spjotvoll weights
source("./R/bayes_weights.R")
source("./R/spjotvoll_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 0.1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
w_2 <- spjotvoll_weights(mu, alpha)
points(mu, w_2,col="red", pch=2)
devtools::build()
?rnorm
devtools::document()
library(pweight)
?iGWAS
citation(package = "base"0
citation(package = "base")
citation(package = "PWEIGHT")
citation(package = "pweight")
devtools::document()
devtools::document()
devtools::document()
citation(package = "pweight")
citation(auto = meta)
citation("lattice")
basecit <- system.file("CITATION", package="base")
source(basecit, echo=TRUE)
readCitationFile(basecit)
citation <- readLines(system.file("CITATION", package = "lubridate"))
cat(citation, sep = "\n")
basecit <- system.file("CITATION", package="lubridate")
source(basecit, echo=TRUE)
basecit <- system.file("CITATION", package="lubridate")
source(basecit, echo=TRUE)
basecit <- system.file("CITATION", package="devtools")
source(basecit, echo=TRUE)
devtools::build()
update.packages()
y
devtools::build()
library("devtools")
install.packages("devtools")
devtools::build()
devtools::build_win()
square = 1
cat("square = ",square, " is negative")
iGWAS(P_current, N_current, P_prior, N_prior, q = 0.05, weighting_method = "bayes",
p_adjust_method = "genome-wide", sides = 2, phi = 1, beta = 2, UB_exp = Inf,
figure = "F", GWAS_data_frame=NA)
#' informed Genome-Wide Association Study
#'
#' Perform an informed Genome-Wide Association Study (iGWAS). This is based on a current study and a prior study. The goal is to discover significant SNPs in the current study using hypothesis testing. The prior study is used to improve power. P-values and sample sizes are used for both the current and the prior studies.
#'
#' This method computes the p-value weights based on the prior p-values, and uses them in multiple testing (p-value weighting) for the current p-values.  The p-value weighting method (e.g. Unweighted, Bayes) and the multiple testing adjustment (e.g. Bonferroni, Benjamini-Hochberg) can be specified independently.
#'
#'  For more details, see the paper "Optimal Multiple Testing Under a
#'  Gaussian Prior on the Effect Sizes", by Dobriban, Fortney, Kim and Owen,
#'   \url{http://arxiv.org/abs/1504.02935}
#'
#'@param P_current P-values in the current study, a numeric vector of length J, with entries between 0 and 1
#'@param N_current sample size in the current study, a positive integer (or vector of length J)
#'@param P_prior P-values in the prior study, a numeric vector of length J, with entries between 0 and 1
#'@param N_prior sample size in the current study, a positive integer (or vector of length J)
#' @param q (optional) uncorrected level at which tests should be performed. Default \code{q = 0.05}
#' @param weighting_method (optional) weighting method used. Available methods: \code{c("unweighted",
#' "bayes", "spjotvoll", "exponential")}. The default is \code{"bayes"}.
#' @param p_adjust_method (optional) adjustment method for multiple testing used. The available methods are
#' \code{"genome-wide"} and those from the \code{p.adjust} function in the \code{stats} package.:
#' \code{c("holm", "hochberg", "hommel", "bonferroni", "BH", "BY",  "fdr", "none")}.
#' \code{"genome-wide"} tests all hypotheses at the genome-wide level \code{5*10^-8}.
#' The default is \code{"genome-wide"}.
#' @param sides (optional) The prior p-values must be one or two-sided: sides = 1 or 2. Default \code{sides = 2}
#' @param phi (optional) dispersion factor used to multiply all standard errors. Default \code{phi = 1}.
#' Used only for Bayes weights.
#' @param  beta (optional) weights are proportional to \code{exp(mu*beta)}, default \code{beta=2}.
#' Used only for Exponential weights.
#' @param  UB_exp (optional) upper bound on the weights (default \code{UB = Inf}).
#'  Used only for Exponential weights.
#' @param  figure (optional) \code{figure = "T"} creates a manhattan plot of the weighted and unweighted p-values.
#' Possible values \code{c("T","F")}, default \code{"F"}
#' @param  GWAS_data_frame (optional) when \code{figure = "T"}, this is the parameter used to create a
#' Manattan plot. it must be a data frame with columns containing \code{c("CHR","BP")}.
#' These parameters are passed to the qqman package for plotting manhattan plots. Default is NA.
#'
#'@return A list containing:
#'
#'\code{sig_ind}: A vector of 0-1s indicating the significant tests (1-s)
#'
#'\code{num_sig}: The number of significant tests. Equals \code{sum(sig_ind)}
#'
#'\code{w}: The computed p-value weights
#'
#'\code{P_w}: The weighted p-values. These equal \code{P_current/w}
#'
#' @family p-value weighting
#'@export
#'
iGWAS <-
function(P_current, N_current, P_prior, N_prior, q = 0.05, weighting_method = "bayes",
p_adjust_method = "genome-wide", sides = 2, phi = 1, beta = 2, UB_exp = Inf,
figure = "F", GWAS_data_frame=NA) {
# Error checking: stop if the variables are not in range
{
if (any(P_current > 1) |
any(P_current < 0) | any(P_prior > 1) | any(P_prior < 0)) {
stop("P-values must be between 0 and 1")
}
if (any(N_current < 1) | any(N_prior < 1)) {
stop("Sample sizes must be at least 1")
}
if ((q <= 0) |
(q >= 1)) {
stop("Level q at which tests will be performed must be in (0,1)")
}
if (phi < 0) {
stop("Dispersion parameter phi for Bayes weights must be non-negative")
}
if (UB_exp <= 1) {
stop("Upper bound UB for exponential weights must be greater than 1")
}
if (!((sides == 1) | (sides == 2))) {
stop("The prior p-values must be one or two-sided: sides = 1 or 2")
}
# Define auxiliary variables to compute weights
{
J <- length(P_current)
if (length(N_current) == 1) {
N_current <- N_current * rep(1,J)
}
if (length(N_prior) == 1) {
N_prior <- N_prior * rep(1,J)
}
T_prior <- qnorm(P_prior / sides)
mu <- T_prior * sqrt(N_current / N_prior)
sigma <- phi * sqrt(N_current / N_prior)
}
# Compute weights: switch according to 'weighting_method'
{
w_methods = c("unweighted","bayes","spjotvoll","exponential")
#for genome-wide significance level, need to adjust q
if (p_adjust_method == "genome-wide") {
sig_level = 5 * 10 ^(-8)
q = sig_level*J
}
switch(
weighting_method,
unweighted = {
w <- rep(1,J)
},
bayes = {
#note: the weight functions use q/J instead of q
if (phi>0) {
res <- bayes_weights(mu, sigma, q / J)
w <- res$w
} else  { #phi = 0
epsilon = 1e-3;
w <- spjotvoll_weights(-abs(mu)-epsilon, q / J)
}
},
spjotvoll = {
w <- spjotvoll_weights(mu, q / J)
},
exponential = {
w <- exp_weights(mu, beta, UB_exp)
},
{
cat(c("Available methods:", methods))
stop("Method must be one of the available methods")
}
)
}
#Perform weighted multiple testing
{
P_weighted <- P_current / w
#if the adjustment method is genome-wide, compare all p-values against Genome-wide significance
#threshold 5*10^{-8}
if (p_adjust_method == "genome-wide") {
sig_level = 5 * 10 ^(-8)
sig_ind <- (P_weighted < sig_level)
} else {
#if the adjustment method is something else, run p.adjust
P_w_adjusted <- p.adjust(P_weighted, p_adjust_method)
sig_ind <- (P_w_adjusted < q)
}
cat(
c(
"Number of significant tests using", weighting_method, "weights and", p_adjust_method, "correction:" , sum(sig_ind), "\n"
)
}
#plot
if (figure=="T"){
#library(qqman)
requireNamespace(qqman, quietly = TRUE)
GWAS_data_frame$CHR <- as.numeric(GWAS_data_frame$CHR)
GWAS_data_frame$BP <- as.numeric(GWAS_data_frame$BP)
GWAS_data_frame$P <- P_current
GWAS_data_frame_wt <- GWAS_data_frame
GWAS_data_frame_wt$P <- P_weighted
suppressWarnings(qqman::manhattan(GWAS_data_frame_wt, ylim=c(0,29), col = c("chartreuse", "chartreuse"), suggestiveline=F))
par(new=T)
suppressWarnings(manhattan(GWAS_data_frame, ylim=c(0,29), col = c("black", "black"), suggestiveline=F))
}
results <- list(
"w" = w, "P_w" = P_weighted, "sig_ind" = sig_ind, "num_sig" = sum(sig_ind)
)
return(results)
}
iGWAS(P_current, N_current, P_prior, N_prior, q = 0.05, weighting_method = "bayes",
p_adjust_method = "genome-wide", sides = 2, phi = 1, beta = 2, UB_exp = Inf,
figure = "F", GWAS_data_frame=NA)
q = 0.05, weighting_method = "bayes",
p_adjust_method = "genome-wide", sides = 2, phi = 1, beta = 2, UB_exp = Inf,
figure = "F", GWAS_data_frame=NA
q = 0.05
UB_exp = Inf
GWAS_data_frame=NA
figure = "F"
devtools::build_win()
