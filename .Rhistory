devtools::document()
devtools::document()
devtools::document()
devtools::document()
?bayes_weights
library(pweight)
library(pweight)
?bayes_weights
?c_1
devtools::document()
?c_1
library(pweight)
?c_1
?lm
lm
library(pweight)
?c_1
devtools::document()
?c_1
library(pweight)
?c_1
devtools::document()
devtools::load_all()
?bayes_weights
devtools::document()
devtools::load_all()
?c_1
devtools::document()
devtools::load_all()
?bayes_weights
?c_1
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::document()
devtools::load_all()
?bayes_weights
devtools::load_all()
?bayes_weights
devtools::document()
?bayes_weights
devtools::load_all()
?bayes_weights
library(pweight)
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
library(pweight)
?bayes_weights
devtools::document()
devtools::load_all()
?bayes_weights
library(pweight)
?bayes_weights
devtools::document()
library(pweight)
?bayes_weights
x = inf
x = Inf
2<x
devtools::document()
library(pweight)
?bayes_weights
?exp_weights
x
x==Inf
devtools::document()
library(pweight)
?exp_weights
devtools::document()
library(pweight)
?exp_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
library(pweight)
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::load_all(".")
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
?spjotvoll_weights
devtools::document()
library(pweight)
package?pweight
devtools::document()
library(pweight)
package?pweight
browseVignettes()
package?knitr
package?markdown
devtools::use_vignette("pweight-basics")
install.packages("rmarkdown")
devtools::use_vignette("pweight-basics")
* \verb+eta+:  a vector of length J, the estimated means of test statistics, derived from the prior data
10^3
?rbinom
?rnorm
set.seed(2)
J <- 10^3
mu <- - 2*abs(rnorm(J))
frac_sig <- 0.1
X <- rbinom(J, 1, frac_sig)
t1 <- normrnd(J, X.*mu,1)
t2 <- normrnd(J, X.*mu,1)
t1 <- rnorm(J, X.*mu,1)
t2 <- rnorm(J, X.*mu,1)
X*mu
t1 <- rnorm(J, X*mu,1)
t2 <- rnorm(J, X*mu,1)
p.adjust(c(0.05,0.05,0.1),"bonferroni")
cat("Error: incorrect ordering of interval endpoints")
cat(c("Number of significant tests: ", sum(ind) ))
alpha <- 0.05
P_adjusted <- p.adjust(P_current,"bonferroni")
ind <- (P_adjusted<alpha)
cat(c("Number of significant tests: ", sum(ind) ))
P_current <- pnorm(t2)
alpha <- 0.05
P_adjusted <- p.adjust(P_current,"bonferroni")
ind <- (P_adjusted<alpha)
cat(c("Number of significant tests: ", sum(ind) ))
source("bayes_weights.R")
source("../bayes_weights.R")
ls
ls()
ggetwd()
getwd()
source("./R/bayes_weights.R")
source("../R/bayes_weights.R")
source("../../R/bayes_weights.R")
[1 2]
(1 2)
(1, 2)
c(1, 2)
c(1, 2)/c(1,2)
x = c(1,2)
find(x==1)
(x==1)
whioch(x==1)
which(x==1)
# Unit tests for bayes weights
source("bayes_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
# vary alpha
for (j in (1:4)) {
alpha <- 2^j / J
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
}
# Brent  ----------------
# generate means
J <- 200
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 100
# find weights
#source("bayes_weights.R")
w_1 <- bayes_weights(mu, sigma, q = alpha/J)
plot(mu,w_1$w)
# Unit tests for bayes weights
source("./R/bayes_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
# vary alpha
for (j in (1:4)) {
alpha <- 2^j / J
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
}
# Brent  ----------------
# generate means
J <- 200
mu <- -abs(rnorm(J))
sigma <- 1 * rep(1, J)
alpha <- 100
# find weights
#source("bayes_weights.R")
w_1 <- bayes_weights(mu, sigma, q = alpha/J)
plot(mu,w_1$w)
# Unit tests for Spjotvoll weights
source("./R/bayes_weights.R")
source("./R/spjotvoll_weights.R")
# Plots  ----------------
# generate means
J <- 2000
mu <- -abs(rnorm(J))
sigma <- 0.1 * rep(1, J)
alpha <- 1 / J
# find weights
w_1 <- bayes_weights(mu, sigma, alpha)
plot(mu, w_1$w)
w_2 <- spjotvoll_weights(mu, alpha)
points(mu, w_2,col="red", pch=2)
devtools::build()
?rnorm
devtools::document()
library(pweight)
?iGWAS
citation(package = "base"0
citation(package = "base")
citation(package = "PWEIGHT")
citation(package = "pweight")
devtools::document()
devtools::document()
devtools::document()
citation(package = "pweight")
citation(auto = meta)
citation("lattice")
basecit <- system.file("CITATION", package="base")
source(basecit, echo=TRUE)
readCitationFile(basecit)
citation <- readLines(system.file("CITATION", package = "lubridate"))
cat(citation, sep = "\n")
basecit <- system.file("CITATION", package="lubridate")
source(basecit, echo=TRUE)
basecit <- system.file("CITATION", package="lubridate")
source(basecit, echo=TRUE)
basecit <- system.file("CITATION", package="devtools")
source(basecit, echo=TRUE)
